@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@1,100&display=swap');

$goldrgb: rgb(247, 208, 32);
$whip: papayawhip;

.flex {
    display: flex;

}


// * column Flex Classes
.centerYcenterXcolumn {    
    justify-content: center;    // this is the Y-axis for column.
    align-items: center;        // could see this as redundant to type over and over. the alternative could be to have {direcion: row || column} class 
    flex-direction: column;
}
.endYcenterXcolumn {
    justify-content: flex-end;
    align-items: center;
    flex-direction: column;
}
// * column Flex Classes

// ? row Flex Classes 
.centerYcenterXrow {
    justify-content: center;
    align-items: center;
    flex-direction: row;
}
.centerYbetweenXrow {    
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
}
// ? row Flex Classes 


// * element styling (non-layout)
#HelmetCont {
    margin-top: 1.5em;
}
.GoldBar {
    height: 10em;
    width: 10em;
}

.UserText {
    font-family: 'Lemon Milk';    
    font-size: 22px; 
    font-weight: bold;
    color: $whip;
}

.MiniGoldBar {    
    height: 50px;
    width: 50px;
    background-image: url('/img/gold.png');    
    background-size: 25%;
    transform: rotate(45deg);
    background-repeat: no-repeat;    
    margin-top: 1.5em;
    cursor: pointer;    
}

#LoginDiv {
    background-image: url('/img/mirror.png');
    background-size: cover;
    background-repeat: no-repeat;
    height: 30em;
    width: 30em;    
}


// * elements 

// ? components
// * * * * * * * * SignupConstraints
#ConstraintGrid {
    height: 10em;
    width: 25em;
    border: 4px solid $goldrgb; 
    background-color: $whip;
    padding: 0.25em;
    display: grid;
    grid-template-areas:
    // "a b b b"
    // "a b b b"
    // "a b b b";
    "radiobuttonbox"
    "constraintText"
}

#ConstraintA {
    // border: 4px solid orange;
    grid-area: radiobuttonbox;
}

#ConstraintA:focus {
    // border: 4px solid orange;
    background-color: $goldrgb;
    // grid-area: radiobuttonbox;
    // input {
    //     height: 200px;
    // }
    // .testtext {
    //     color: red;
    // }

}

// #ConstraintA > input {
//     border: 5px solid hotpink;
// }

#ConstraintA > .CheckBox {
    border: 5px solid orange;
}

#ConstraintB {
    border: 4px solid $goldrgb;
    grid-area: constraintText;
}

.CheckBox {
    color: orange;
    border: 2px solid rebeccapurple;
}



  


// * * * * * * * *

// ? components




// * checkbox code!!!!

.checkboxcontainer {
    display: flex;
    margin: 0 2em;
  }
  
  .checkboxcontainer label {
    cursor: pointer;
    display: flex;
  
    cursor: pointer;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    font-size: 14px;
    color: rgb(62, 50, 32);
    font-family: 'Josefin Sans', sans-serif;
    text-align: center;
  
  }
  
  .checkboxcontainer input[type='checkbox'] {
    cursor: pointer;
    opacity: 0;
    position: absolute;
  }
  
  .checkboxcontainer label::before {
    content: '';
      width: 1em;
      height: 1em;
      border: 0.125em solid rgb(247, 208, 32);
      border-radius: 0.125em;
  }
  
  .checkboxcontainer label:hover::before {
    content: '';
    width: 1em;
    height: 1em;
    border: 0.125em solid rgb(247, 208, 32);
    border-radius: 0.125em;
  }
  
  
  .checkboxcontainer input[type='checkbox']:disabled + label,
  .checkboxcontainer input[type='checkbox']:disabled {
    background-color: moccasin;
    -webkit-clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
            clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
  }
  
  .checkboxcontainer input[type='checkbox']:checked + label::before {
    content: '\002714';
    display: flex;
    justify-content: center;
    align-items: center;
    color: rgb(247, 208, 36);
  }

// .checkbox-container {
//     margin: 0 2em;
//   }
  
//   .checkbox-container label {
//     cursor: pointer;
//     display: flex;
//     flex-direction: column;
//     justify-content: center;
//     align-items: center;
//     font-weight: bold;
//     font-size: 14px;
//     color: rgb(62, 50, 32);
//     font-family: 'Josefin Sans', sans-serif;
//     text-align: center;
//   }
  
//   .checkbox-container input[type="checkbox"] {
//     cursor: pointer;
//     opacity: 0;
//     position: absolute;
//   }
  
//   .checkbox-container label::before {
//     content: '';
//     width: 1em;
//     height: 1em;
//     border: 0.125em solid rgb(247, 208, 32);
//     border-radius: 0.125em;
//   }
  
//   .checkbox-container label:hover::before {
//     background-color: moccasin;
//     -webkit-clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
//             clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
//   }
  
//   .checkbox-container input[type='checkbox']:checked + label::before {
//     content: '\002714';
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     color: white;
//   }


//   <div className="checkbox-container Column">                        
//   <input
//   onClick={inputClick}
//    type="checkbox" className={sty.CheckBox} id="usernamecheckbox" name="username" checked readOnly={true}/>
//   <label id="label1" htmlFor="usernamecheckbox">username</label>
//   </div>

//   <div className="checkbox-container Column">                        
//   <input
//   onClick={inputClick}
//    type="checkbox" className={sty.CheckBox} id="passwordcheckbox" name="password" checked readOnly={true} />
//   <label htmlFor="passwordcheckbox">password</label>
//   </div>

//   <div className="checkbox-container Column">                        
//   <input
//   onClick={inputClick}
//    type="checkbox" className={sty.CheckBox} id="emailcheckbox" name="email" checked readOnly={true} />
//   <label htmlFor="emailcheckbox">email</label>
//   </div>

  // * checkbox code!!!!
